#!/usr/bin/env node
var fs = require('fs');
var YAML = require('yamljs');
var mustache = require('mustache');
var watch = require('glob-watcher');


var paths = {
  //presentation: "./example/"
  presentation: process.cwd()+'/'
}

var build = function() {
    var config = YAML.load(paths.presentation+'config.yml'),
        slides = config.slides.map(function(x) {
            return fs.readFileSync(paths.presentation+x, {'encoding': 'utf8'});
        }).join('\n\n'),
        template = fs.readFileSync(paths.presentation+'template.mustache', {'encoding': 'utf8'}),
        view = {
            revealjs: config.revealjs || __dirname+'/node_modules/reveal.js/',
            title: config.title,
            author: config.author,
            description: config.description,
            inline: {}
        },
        partials = {
            slides: slides
        };

    // Add templates
    for (var prop in config.templates)
        if (config.templates.hasOwnProperty(prop))
            view[prop] = config.templates[prop]

    // Add inline files
    for (var prop in config.inline)
        if (config.inline.hasOwnProperty(prop))
            view.inline[prop] = fs.readFileSync(paths.presentation+config.inline[prop], {'encoding': 'utf8'});

    var rendered = mustache.render(template, view, partials);
    
    fs.writeFileSync(paths.presentation+config.output, rendered ,{'encoding': 'utf8'});
    console.log("Written file: "+paths.presentation+'index.html');
};

// Initial call
build();

// Watcher
var watcher = watch([paths.presentation+'*', '!'+paths.presentation+'index.html']);
watcher.on('change', function(evt) {
    console.log(evt);
    build();
});
